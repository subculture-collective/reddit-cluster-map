// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: oauth.sql

package db

import (
	"context"
	"time"
)

const getOAuthAccountByUserID = `-- name: GetOAuthAccountByUserID :one
SELECT id, reddit_user_id, reddit_username, access_token, refresh_token, expires_at, scopes, created_at, updated_at FROM oauth_accounts WHERE reddit_user_id = $1
`

func (q *Queries) GetOAuthAccountByUserID(ctx context.Context, redditUserID string) (OauthAccount, error) {
	row := q.db.QueryRowContext(ctx, getOAuthAccountByUserID, redditUserID)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.RedditUserID,
		&i.RedditUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthAccountByUsername = `-- name: GetOAuthAccountByUsername :one
SELECT id, reddit_user_id, reddit_username, access_token, refresh_token, expires_at, scopes, created_at, updated_at FROM oauth_accounts WHERE reddit_username = $1
`

func (q *Queries) GetOAuthAccountByUsername(ctx context.Context, redditUsername string) (OauthAccount, error) {
	row := q.db.QueryRowContext(ctx, getOAuthAccountByUsername, redditUsername)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.RedditUserID,
		&i.RedditUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertOAuthAccount = `-- name: UpsertOAuthAccount :one
INSERT INTO oauth_accounts (reddit_user_id, reddit_username, access_token, refresh_token, expires_at, scopes)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (reddit_user_id) DO UPDATE SET
  reddit_username = EXCLUDED.reddit_username,
  access_token = EXCLUDED.access_token,
  refresh_token = EXCLUDED.refresh_token,
  expires_at = EXCLUDED.expires_at,
  scopes = EXCLUDED.scopes,
  updated_at = now()
RETURNING id, reddit_user_id, reddit_username, access_token, refresh_token, expires_at, scopes, created_at, updated_at
`

type UpsertOAuthAccountParams struct {
	RedditUserID   string
	RedditUsername string
	AccessToken    string
	RefreshToken   string
	ExpiresAt      time.Time
	Scopes         string
}

func (q *Queries) UpsertOAuthAccount(ctx context.Context, arg UpsertOAuthAccountParams) (OauthAccount, error) {
	row := q.db.QueryRowContext(ctx, upsertOAuthAccount,
		arg.RedditUserID,
		arg.RedditUsername,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.Scopes,
	)
	var i OauthAccount
	err := row.Scan(
		&i.ID,
		&i.RedditUserID,
		&i.RedditUsername,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
