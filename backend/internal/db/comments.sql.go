// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package db

import (
	"context"
	"database/sql"
)

const getComment = `-- name: GetComment :one
SELECT id, post_id, author_id, subreddit_id, parent_id, body, created_at, score, last_seen, depth FROM comments WHERE id = $1
`

func (q *Queries) GetComment(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.SubredditID,
		&i.ParentID,
		&i.Body,
		&i.CreatedAt,
		&i.Score,
		&i.LastSeen,
		&i.Depth,
	)
	return i, err
}

const getCommentsByPost = `-- name: GetCommentsByPost :many
SELECT id, post_id, author_id, subreddit_id, parent_id, body, created_at, score, last_seen, depth FROM comments WHERE post_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetCommentsByPost(ctx context.Context, postID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.SubredditID,
			&i.ParentID,
			&i.Body,
			&i.CreatedAt,
			&i.Score,
			&i.LastSeen,
			&i.Depth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUser = `-- name: GetCommentsByUser :many
SELECT id, post_id, author_id, subreddit_id, parent_id, body, created_at, score, last_seen, depth FROM comments WHERE author_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetCommentsByUserParams struct {
	AuthorID int32
	Limit    int32
	Offset   int32
}

func (q *Queries) GetCommentsByUser(ctx context.Context, arg GetCommentsByUserParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByUser, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.SubredditID,
			&i.ParentID,
			&i.Body,
			&i.CreatedAt,
			&i.Score,
			&i.LastSeen,
			&i.Depth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByPost = `-- name: ListCommentsByPost :many
SELECT id, post_id, author_id, subreddit_id, parent_id, body, created_at, score, last_seen, depth FROM comments WHERE post_id = $1 ORDER BY created_at ASC
`

func (q *Queries) ListCommentsByPost(ctx context.Context, postID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.SubredditID,
			&i.ParentID,
			&i.Body,
			&i.CreatedAt,
			&i.Score,
			&i.LastSeen,
			&i.Depth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertComment = `-- name: UpsertComment :exec
INSERT INTO comments (id, post_id, author_id, subreddit_id, parent_id, body, created_at, score, last_seen, depth)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, now(), $9)
ON CONFLICT (id) DO UPDATE SET
  post_id = EXCLUDED.post_id,
  author_id = EXCLUDED.author_id,
  subreddit_id = EXCLUDED.subreddit_id,
  parent_id = EXCLUDED.parent_id,
  body = EXCLUDED.body,
  created_at = EXCLUDED.created_at,
  score = EXCLUDED.score,
  last_seen = now(),
  depth = EXCLUDED.depth
`

type UpsertCommentParams struct {
	ID          string
	PostID      string
	AuthorID    int32
	SubredditID int32
	ParentID    sql.NullString
	Body        sql.NullString
	CreatedAt   sql.NullTime
	Score       sql.NullInt32
	Depth       sql.NullInt32
}

func (q *Queries) UpsertComment(ctx context.Context, arg UpsertCommentParams) error {
	_, err := q.db.ExecContext(ctx, upsertComment,
		arg.ID,
		arg.PostID,
		arg.AuthorID,
		arg.SubredditID,
		arg.ParentID,
		arg.Body,
		arg.CreatedAt,
		arg.Score,
		arg.Depth,
	)
	return err
}
