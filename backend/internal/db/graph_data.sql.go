// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: graph_data.sql

package db

import (
	"context"
	"encoding/json"
)

const getGraphData = `-- name: GetGraphData :many
WITH subreddit_nodes AS (
    SELECT 
        'subreddit_' || id as id,
        name,
        subscribers as val,
        'subreddit' as type
    FROM subreddits
),
user_nodes AS (
    SELECT 
        'user_' || id as id,
        username as name,
        (SELECT COUNT(*) FROM comments WHERE author_id = users.id) + 
        (SELECT COUNT(*) FROM posts WHERE author_id = users.id) as val,
        'user' as type
    FROM users
),
subreddit_links AS (
    SELECT 
        'subreddit_' || s1.id as source,
        'subreddit_' || s2.id as target
    FROM subreddit_relationships sr
    JOIN subreddits s1 ON sr.source_subreddit_id = s1.id
    JOIN subreddits s2 ON sr.target_subreddit_id = s2.id
    WHERE sr.overlap_count > 0
),
user_subreddit_links AS (
    SELECT 
        'user_' || u.id as source,
        'subreddit_' || s.id as target
    FROM user_subreddit_activity usa
    JOIN users u ON usa.user_id = u.id
    JOIN subreddits s ON usa.subreddit_id = s.id
    WHERE usa.activity_count > 0
)
SELECT 
    json_build_object(
        'nodes', (
            SELECT json_agg(nodes)
            FROM (
                SELECT id, name, val, type FROM subreddit_nodes
                UNION ALL
                SELECT id, name, val, type FROM user_nodes
            ) nodes
        ),
        'links', (
            SELECT json_agg(links)
            FROM (
                SELECT source, target FROM subreddit_links
                UNION ALL
                SELECT source, target FROM user_subreddit_links
            ) links
        )
    ) as graph_data
`

func (q *Queries) GetGraphData(ctx context.Context) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, getGraphData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var graph_data json.RawMessage
		if err := rows.Scan(&graph_data); err != nil {
			return nil, err
		}
		items = append(items, graph_data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
