// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
)

const getPost = `-- name: GetPost :one
SELECT id, subreddit_id, author_id, title, selftext, permalink, created_at, score, flair, url, is_self, last_seen FROM posts WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.SubredditID,
		&i.AuthorID,
		&i.Title,
		&i.Selftext,
		&i.Permalink,
		&i.CreatedAt,
		&i.Score,
		&i.Flair,
		&i.Url,
		&i.IsSelf,
		&i.LastSeen,
	)
	return i, err
}

const listPostsBySubreddit = `-- name: ListPostsBySubreddit :many
SELECT id, subreddit_id, author_id, title, selftext, permalink, created_at, score, flair, url, is_self, last_seen FROM posts WHERE subreddit_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListPostsBySubredditParams struct {
	SubredditID int32
	Limit       int32
	Offset      int32
}

func (q *Queries) ListPostsBySubreddit(ctx context.Context, arg ListPostsBySubredditParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPostsBySubreddit, arg.SubredditID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.SubredditID,
			&i.AuthorID,
			&i.Title,
			&i.Selftext,
			&i.Permalink,
			&i.CreatedAt,
			&i.Score,
			&i.Flair,
			&i.Url,
			&i.IsSelf,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPost = `-- name: UpsertPost :exec
INSERT INTO posts (id, subreddit_id, author_id, title, selftext, permalink, created_at, score, flair, url, is_self, last_seen)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, now())
ON CONFLICT (id) DO UPDATE SET
  subreddit_id = EXCLUDED.subreddit_id,
  author_id = EXCLUDED.author_id,
  title = EXCLUDED.title,
  selftext = EXCLUDED.selftext,
  permalink = EXCLUDED.permalink,
  created_at = EXCLUDED.created_at,
  score = EXCLUDED.score,
  flair = EXCLUDED.flair,
  url = EXCLUDED.url,
  is_self = EXCLUDED.is_self,
  last_seen = now()
`

type UpsertPostParams struct {
	ID          string
	SubredditID int32
	AuthorID    int32
	Title       sql.NullString
	Selftext    sql.NullString
	Permalink   sql.NullString
	CreatedAt   sql.NullTime
	Score       sql.NullInt32
	Flair       sql.NullString
	Url         sql.NullString
	IsSelf      sql.NullBool
}

func (q *Queries) UpsertPost(ctx context.Context, arg UpsertPostParams) error {
	_, err := q.db.ExecContext(ctx, upsertPost,
		arg.ID,
		arg.SubredditID,
		arg.AuthorID,
		arg.Title,
		arg.Selftext,
		arg.Permalink,
		arg.CreatedAt,
		arg.Score,
		arg.Flair,
		arg.Url,
		arg.IsSelf,
	)
	return err
}
